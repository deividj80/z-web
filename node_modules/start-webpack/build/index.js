'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.dev = exports.build = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultStatsOptions = {
    colors: true,
    children: false,
    assets: false,
    version: false,
    hash: false,
    chunkModules: false
};
var defaultPort = 3000;

var build = exports.build = function build(config, userStatsOptions) {
    return function (input) {
        return function webpackBuild(log) {
            var webpack = require('webpack');

            return new _promise2.default(function (resolve, reject) {
                var statsOptions = (0, _extends3.default)({}, defaultStatsOptions, userStatsOptions);

                webpack(config, function (err, stats) {
                    if (err) {
                        return reject(err);
                    }

                    log(stats.toString(statsOptions));
                    resolve(input);
                });
            });
        };
    };
};

var dev = exports.dev = function dev(config) {
    var port = arguments.length <= 1 || arguments[1] === undefined ? defaultPort : arguments[1];
    var userOptions = arguments[2];
    return function (input) {
        return function webpackDev(log) {
            var webpack = require('webpack');
            var WebpackDevServer = require('webpack-dev-server');

            return new _promise2.default(function (resolve, reject) {
                var options = (0, _extends3.default)({
                    hot: true,
                    stats: defaultStatsOptions
                }, userOptions);
                var server = new WebpackDevServer(webpack(config), options);

                server.listen(port, function (err) {
                    if (err) {
                        return reject(err);
                    }

                    log('http://localhost:' + port + '/webpack-dev-server/');
                    resolve(input);
                });
            });
        };
    };
};
